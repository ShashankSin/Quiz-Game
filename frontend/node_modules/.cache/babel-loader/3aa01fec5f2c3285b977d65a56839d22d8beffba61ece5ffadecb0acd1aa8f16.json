{"ast":null,"code":"const handleSubmitQuiz = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const answeredQuestions = Object.keys(currentAnswers).length;\n    if (answeredQuestions < questions.length) {\n      if (!window.confirm(`You've only answered ${answeredQuestions} out of ${questions.length} questions. Are you sure you want to submit?`)) {\n        return;\n      }\n    }\n    const results = questions.map(question => ({\n      questionId: question._id,\n      selectedOption: currentAnswers[question._id] !== undefined ? currentAnswers[question._id] : null,\n      isCorrect: currentAnswers[question._id] === question.correctOption\n    }));\n    await axios.post(\"http://localhost:5000/api/quiz/submit\", {\n      categoryId,\n      results,\n      score\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    // ✅ Navigate to review page with results\n    navigate(\"/player/quiz-review\", {\n      state: {\n        questions,\n        currentAnswers,\n        score\n      }\n    });\n  } catch (error) {\n    setError(\"Failed to submit quiz\");\n    console.error(error);\n  }\n};","map":{"version":3,"names":["handleSubmitQuiz","token","localStorage","getItem","answeredQuestions","Object","keys","currentAnswers","length","questions","window","confirm","results","map","question","questionId","_id","selectedOption","undefined","isCorrect","correctOption","axios","post","categoryId","score","headers","Authorization","navigate","state","error","setError","console"],"sources":["D:/Lusana ko project/Lusana ko project/frontend/src/App.js"],"sourcesContent":["const handleSubmitQuiz = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const answeredQuestions = Object.keys(currentAnswers).length;\n\n    if (answeredQuestions < questions.length) {\n      if (\n        !window.confirm(\n          `You've only answered ${answeredQuestions} out of ${questions.length} questions. Are you sure you want to submit?`\n        )\n      ) {\n        return;\n      }\n    }\n\n    const results = questions.map((question) => ({\n      questionId: question._id,\n      selectedOption:\n        currentAnswers[question._id] !== undefined\n          ? currentAnswers[question._id]\n          : null,\n      isCorrect: currentAnswers[question._id] === question.correctOption,\n    }));\n\n    await axios.post(\n      \"http://localhost:5000/api/quiz/submit\",\n      {\n        categoryId,\n        results,\n        score,\n      },\n      {\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n\n    // ✅ Navigate to review page with results\n    navigate(\"/player/quiz-review\", {\n      state: {\n        questions,\n        currentAnswers,\n        score,\n      },\n    });\n  } catch (error) {\n    setError(\"Failed to submit quiz\");\n    console.error(error);\n  }\n};\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,IAAI,CAACC,cAAc,CAAC,CAACC,MAAM;IAE5D,IAAIJ,iBAAiB,GAAGK,SAAS,CAACD,MAAM,EAAE;MACxC,IACE,CAACE,MAAM,CAACC,OAAO,CACb,wBAAwBP,iBAAiB,WAAWK,SAAS,CAACD,MAAM,8CACtE,CAAC,EACD;QACA;MACF;IACF;IAEA,MAAMI,OAAO,GAAGH,SAAS,CAACI,GAAG,CAAEC,QAAQ,KAAM;MAC3CC,UAAU,EAAED,QAAQ,CAACE,GAAG;MACxBC,cAAc,EACZV,cAAc,CAACO,QAAQ,CAACE,GAAG,CAAC,KAAKE,SAAS,GACtCX,cAAc,CAACO,QAAQ,CAACE,GAAG,CAAC,GAC5B,IAAI;MACVG,SAAS,EAAEZ,cAAc,CAACO,QAAQ,CAACE,GAAG,CAAC,KAAKF,QAAQ,CAACM;IACvD,CAAC,CAAC,CAAC;IAEH,MAAMC,KAAK,CAACC,IAAI,CACd,uCAAuC,EACvC;MACEC,UAAU;MACVX,OAAO;MACPY;IACF,CAAC,EACD;MACEC,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUzB,KAAK;MAAG;IAC9C,CACF,CAAC;;IAED;IACA0B,QAAQ,CAAC,qBAAqB,EAAE;MAC9BC,KAAK,EAAE;QACLnB,SAAS;QACTF,cAAc;QACdiB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,QAAQ,CAAC,uBAAuB,CAAC;IACjCC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}